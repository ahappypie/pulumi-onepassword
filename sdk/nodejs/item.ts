// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export class Item extends pulumi.CustomResource {
    /**
     * Get an existing Item resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ItemState, opts?: pulumi.CustomResourceOptions): Item {
        return new Item(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'onepassword:index/item:Item';

    /**
     * Returns true if the given object is an instance of Item.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Item {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Item.__pulumiType;
    }

    /**
     * The category of the item. One of ["login" "password" "database"]
     */
    public readonly category!: pulumi.Output<string | undefined>;
    /**
     * (Only applies to the database category) The name of the database.
     */
    public readonly database!: pulumi.Output<string | undefined>;
    /**
     * (Only applies to the database category) The address where the database can be found
     */
    public readonly hostname!: pulumi.Output<string | undefined>;
    /**
     * The Terraform resource identifier for this item in the format `vaults/<vault_id>/items/<item_id>`.
     */
    public /*out*/ readonly id!: pulumi.Output<string>;
    /**
     * Password for this item.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Password for this item.
     */
    public readonly passwordRecipe!: pulumi.Output<outputs.ItemPasswordRecipe | undefined>;
    /**
     * (Only applies to the database category) The port the database is listening on.
     */
    public readonly port!: pulumi.Output<string | undefined>;
    /**
     * A list of custom sections in an item
     */
    public readonly sections!: pulumi.Output<outputs.ItemSection[] | undefined>;
    /**
     * An array of strings of the tags assigned to the item.
     */
    public readonly tags!: pulumi.Output<string[] | undefined>;
    /**
     * The title of the item.
     */
    public readonly title!: pulumi.Output<string | undefined>;
    /**
     * (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql"
     * "oracle" "postgresql" "sqlite" "other"]
     */
    public readonly type!: pulumi.Output<string | undefined>;
    /**
     * The primary URL for the item.
     */
    public readonly url!: pulumi.Output<string | undefined>;
    /**
     * Username for this item.
     */
    public readonly username!: pulumi.Output<string | undefined>;
    /**
     * The UUID of the item. Item identifiers are unique within a specific vault.
     */
    public /*out*/ readonly uuid!: pulumi.Output<string>;
    /**
     * The UUID of the vault the item is in.
     */
    public readonly vault!: pulumi.Output<string>;

    /**
     * Create a Item resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ItemArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ItemArgs | ItemState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ItemState | undefined;
            inputs["category"] = state ? state.category : undefined;
            inputs["database"] = state ? state.database : undefined;
            inputs["hostname"] = state ? state.hostname : undefined;
            inputs["id"] = state ? state.id : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["passwordRecipe"] = state ? state.passwordRecipe : undefined;
            inputs["port"] = state ? state.port : undefined;
            inputs["sections"] = state ? state.sections : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["username"] = state ? state.username : undefined;
            inputs["uuid"] = state ? state.uuid : undefined;
            inputs["vault"] = state ? state.vault : undefined;
        } else {
            const args = argsOrState as ItemArgs | undefined;
            if ((!args || args.vault === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vault'");
            }
            inputs["category"] = args ? args.category : undefined;
            inputs["database"] = args ? args.database : undefined;
            inputs["hostname"] = args ? args.hostname : undefined;
            inputs["password"] = args ? args.password : undefined;
            inputs["passwordRecipe"] = args ? args.passwordRecipe : undefined;
            inputs["port"] = args ? args.port : undefined;
            inputs["sections"] = args ? args.sections : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["url"] = args ? args.url : undefined;
            inputs["username"] = args ? args.username : undefined;
            inputs["vault"] = args ? args.vault : undefined;
            inputs["id"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(Item.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Item resources.
 */
export interface ItemState {
    /**
     * The category of the item. One of ["login" "password" "database"]
     */
    category?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The name of the database.
     */
    database?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The address where the database can be found
     */
    hostname?: pulumi.Input<string>;
    /**
     * The Terraform resource identifier for this item in the format `vaults/<vault_id>/items/<item_id>`.
     */
    id?: pulumi.Input<string>;
    /**
     * Password for this item.
     */
    password?: pulumi.Input<string>;
    /**
     * Password for this item.
     */
    passwordRecipe?: pulumi.Input<inputs.ItemPasswordRecipe>;
    /**
     * (Only applies to the database category) The port the database is listening on.
     */
    port?: pulumi.Input<string>;
    /**
     * A list of custom sections in an item
     */
    sections?: pulumi.Input<pulumi.Input<inputs.ItemSection>[]>;
    /**
     * An array of strings of the tags assigned to the item.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the item.
     */
    title?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql"
     * "oracle" "postgresql" "sqlite" "other"]
     */
    type?: pulumi.Input<string>;
    /**
     * The primary URL for the item.
     */
    url?: pulumi.Input<string>;
    /**
     * Username for this item.
     */
    username?: pulumi.Input<string>;
    /**
     * The UUID of the item. Item identifiers are unique within a specific vault.
     */
    uuid?: pulumi.Input<string>;
    /**
     * The UUID of the vault the item is in.
     */
    vault?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Item resource.
 */
export interface ItemArgs {
    /**
     * The category of the item. One of ["login" "password" "database"]
     */
    category?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The name of the database.
     */
    database?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The address where the database can be found
     */
    hostname?: pulumi.Input<string>;
    /**
     * Password for this item.
     */
    password?: pulumi.Input<string>;
    /**
     * Password for this item.
     */
    passwordRecipe?: pulumi.Input<inputs.ItemPasswordRecipe>;
    /**
     * (Only applies to the database category) The port the database is listening on.
     */
    port?: pulumi.Input<string>;
    /**
     * A list of custom sections in an item
     */
    sections?: pulumi.Input<pulumi.Input<inputs.ItemSection>[]>;
    /**
     * An array of strings of the tags assigned to the item.
     */
    tags?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The title of the item.
     */
    title?: pulumi.Input<string>;
    /**
     * (Only applies to the database category) The type of database. One of ["db2" "filemaker" "msaccess" "mssql" "mysql"
     * "oracle" "postgresql" "sqlite" "other"]
     */
    type?: pulumi.Input<string>;
    /**
     * The primary URL for the item.
     */
    url?: pulumi.Input<string>;
    /**
     * Username for this item.
     */
    username?: pulumi.Input<string>;
    /**
     * The UUID of the vault the item is in.
     */
    vault: pulumi.Input<string>;
}
